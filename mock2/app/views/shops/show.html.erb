<%= stylesheet_link_tag "shops", :media => "all" %>

<%= render 'choices'%>

<div id="labels">
  <span style="font-size: 14px;line-height: 32px;">選択された条件
    <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
    &nbsp;&nbsp;
  </span>
  <% @shops.each do |shop| %>
    <% if @selected_shop_ids && @selected_shop_ids.include?(shop.id) %>
      <button type="button" class="btn btn-sm btn-success"><%= shop.name %> <span class="badge"><%= shop.branches_count %></span></button>
    <% end %>
  <% end %>
  <% @prefectures.each do |prefecture| %>
    <% if @selected_prefecture_ids && @selected_prefecture_ids.include?(prefecture.id) %>
      <button type="button" class="btn btn-sm btn-danger"><%= prefecture.name %></button>
    <% end %>
  <% end %>
</div>

<% if @error_msg %>
  <span style="color: red; font-weight: bold;"> Error: <%= @error_msg %> </span>
<% elsif @branch_markers.length == 0 %>
  <p style="margin: 30px auto; text-align: center"><span style="font-size: 14px; font-weight: bold;">該当する店舗はありません。</span></p>
<% else %>
  <input id="pac-input" class="controls" type="text" placeholder="Search Box">
  <div id="map"></div>
  <script type="text/javascript">
    // var handler = Gmaps.build('Google');
    // handler.buildMap({ internal: {id: 'map'}}, function(){
    //   var markers = handler.addMarkers([
    //       <% @branches.each do |b| %>
    //         { lat: <%= b.latitude %>, lng: <%= b.longitude %>},
    //       <% end %>
    //   ]);
    //   handler.bounds.extendWith(markers);
    //   handler.fitMapToBounds();
    // });

  handler = Gmaps.build(
      'Google'
      //, {
      //   markers: {
      //     clusterer: {
      //       gridSize: 20,
      //       maxZoom: 10
      //     }
      //   }
      // }
  );
  handler.buildMap({ internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(<%=raw @branch_markers.to_json %>);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });

  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  var map = handler.getMap();
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var old_marker;
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    if (places.slength == 0) {
      return;
    }
    var place = places[0]
    old_marker = place;

    // Create a marker for each place.
    handler.addMarker({
      map:   map,
      title: place.name,
      lat:   place.geometry.location.lat(),
      lng:   place.geometry.location.lng()
    });
    console.log(map);

    var bounds = new google.maps.LatLngBounds();
    if (place.geometry.viewport) {
      // Only geocodes have viewport.
      bounds.union(place.geometry.viewport);
      map.fitBounds(bounds);
    } else {
      bounds.extend(place.geometry.location);
      map.fitBounds(bounds);
      map.setZoom(15)
    }
  });
  </script>
<% end %>

